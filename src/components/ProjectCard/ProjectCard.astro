---
import Link from './Link.astro'
import { urlFor } from '../../util/imageBuilder'

export interface Props {
    name: string
    excerpt: string
    image: string
    tags: string[]
    gitHubUrl: string
    liveSiteUrl: string
    slug: string
}

const { name, excerpt, image, tags, gitHubUrl, liveSiteUrl, slug } = Astro.props
const projectImage = urlFor(image).url()
---

<div class="flip-card">
    <div class="flip-card-inner">
        <div class="flip-card-front shadow-md shadow-black/25">
            <img src={projectImage} alt="Avatar" />
        </div>
        <div
            class="flip-card-back flex flex-col justify-start bg-bgDark dark:bg-gray-900 shadow-md shadow-black/25"
        >
            <div class="mt-4">
                <span class="text-lg text-purpleDark">{name}</span>
                <p class="mt-2 px-4 text-lg text-textDark">
                    {excerpt}
                </p>
            </div>
            <div class="mb-4 flex flex-wrap justify-center gap-1">
                <div class="w-full flex px-12 pb-2 gap-2">
                    <Link url={gitHubUrl} icon="logo-github" name="code" />
                    <Link
                        url={liveSiteUrl}
                        icon="open-outline"
                        name="live site"
                    />
                </div>
                {
                    tags.map((tag, index) => (
                        <span
                            class={`inline-flex items-center px-2.5 py-0.5 text-xs 
                                    ${
                                        index == 0
                                            ? 'bg-green-100  text-green-800'
                                            : index == 1
                                            ? 'bg-purple-100 text-purple-800'
                                            : 'bg-blue-100 text-blue-800'
                                    }
                                `}
                        >
                            {tag['name']}
                        </span>
                    ))
                }
            </div>
        </div>
    </div>
</div>

<style>
    /* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
    .flip-card {
        background-color: transparent;
        width: 400px;
        height: 235px;
        perspective: 1000px; /* Remove this if you don't want the 3D effect */
    }

    /* This container is needed to position the front and back side */
    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.8s;
        transform-style: preserve-3d;
    }

    /* Do an horizontal flip when you move the mouse over the flip box container */
    .flip-card:hover .flip-card-inner {
        transform: rotateY(180deg);
        cursor: pointer;
    }

    /* Position the front and back side */
    .flip-card-front,
    .flip-card-back {
        position: absolute;
        display: flex;
        justify-content: space-between;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden; /* Safari */
        backface-visibility: hidden;
    }

    /* Style the front side (fallback if image is missing) */
    .flip-card-front {
        background-color: #bbb;
        color: black;
    }

    /* Style the back side */
    .flip-card-back {
        color: white;
        transform: rotateY(180deg);
    }
</style>
